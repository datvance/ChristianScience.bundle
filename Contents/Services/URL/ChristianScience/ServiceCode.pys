DEBUG = True
CS_DOT_COM = 'http://www.christianscience.com'

YT_URL = 'http://www.youtube.com/embed/'
YT_THUMB_URL = 'https://i1.ytimg.com/vi/%s/hqdefault.jpg'
DURATION_RE = Regex('\[(\d+) mins.*?\]')

DAILY_LIFT = '/your-daily-lift/'
DAILY_LIFT_SRC_RE = Regex('file: "(.*?)",')

SUNDAY_SERVICE = 'online-sunday-services'
WEDNESDAY_SERVICE = 'online-wednesday-meetings'
SERVICE_SRC_RE = Regex('playerSource = "(.*?)",')
SERVICE_ICON = "http://christianscience.com/var/cscom/storage/images/media/images/onair_logo_markonly/128132-1-eng-US/onair_logo_markonly_medium.jpg"


####################################################################################################
def NormalizeURL(url):

    uri = url.split('://')[1]
    if uri.find('www.') < 0:
        uri = 'www.' + uri

    return 'http://' + uri


####################################################################################################
def MetadataObjectForURL(url):

    log('MetadataObjectForURL('+url+')')

    media_details = GetMediaDetails(url)

    return TrackObject(
                title=media_details['title'],
                summary=media_details['summary'],
                thumb=media_details['thumb'],
                originally_available_at=media_details['date'],
                duration=media_details['duration']
        )


####################################################################################################
def MediaObjectsForURL(url):

    log('MediaObjectsForURL('+url+')')

    if url.find(DAILY_LIFT) > 0:

        audio = AudioCodec.MP3
        ext = 'mp3'

    elif url.find(SUNDAY_SERVICE) > 0 or url.find(WEDNESDAY_SERVICE) > 0:

        audio = AudioCodec.AAC
        if Client.Platform == "Roku":
            ext = 'mp4'
        else:
            ext = 'm4a'

    return [
            MediaObject(
                audio_codec=audio,
                parts=[PartObject(key=Callback(PlayAudio, url=url, ext=ext))]
            )
    ]


####################################################################################################
def PlayAudio(url):

    media_details = GetMediaDetails(url)
    log('Play: %s' % media_details['src'])

    return Redirect(media_details['src'])


####################################################################################################
def GetMediaDetails(url):

    if url.find(DAILY_LIFT) > 0:
        media_details = GetDailyLift(url)
    elif url.find(SUNDAY_SERVICE) > 0 or url.find(WEDNESDAY_SERVICE) > 0:
        media_details = GetChurchService(url)
    else:
        media_details = {}

    log(str(media_details))

    return media_details


####################################################################################################
def GetChurchService(url):

    log("GetChurchService(" + url + ")")

    page = HTML.ElementFromURL(url)
    source = HTML.StringFromElement(page)
    src = SERVICE_SRC_RE.search(source).group(1)

    today = Datetime.Now()
    if url.find(SUNDAY_SERVICE) > 0:
        date = today + Datetime.Delta(days=-today.weekday() - 1)
        summary = "Recording of this week's Sunday Church Service at The Mother Church, The First Church of Christ, " \
                  "Scientist. The service lasts one hour and an organ prelude and postlude extend 7-10 minutes before " \
                  "and after the service."
    elif url.find(WEDNESDAY_SERVICE) > 0:
        offset = (today.weekday() - 2) % 7
        date = today - Datetime.Delta(days=offset)
        summary = "Recording of this week's Wednesday Testimony Meeting at The Mother Church, The First Church of " \
                  "Christ, Scientist."

    details = {'date': date,
               'duration': 4800000,
               'src': src,
               'summary': summary,
               'thumb': SERVICE_ICON,
               'title': 'Sunday Service'}

    return details


####################################################################################################
def GetDailyLift(url):

    log("GetDailyLift(" + url + ")")

    page = HTML.ElementFromURL(url)
    source = HTML.StringFromElement(page)

    src = DAILY_LIFT_SRC_RE.search(source).group(1)
    summary_text = page.xpath('//p[@class="byline"]')[0]
    summary = ' '.join(summary_text.xpath('.//text()')).split('.')[0].strip()
    thumb_el = page.xpath('//div[@class="cover-image"]/img')[0]
    thumb = CS_DOT_COM + thumb_el.get('src')
    title = thumb_el.get('title')
    date = None
    try:
        day = page.xpath('//span[@class="dateline"]/text()')
        date = Datetime.ParseDate(day.text).date()
    except:
        pass

    details = {'date': date, 'duration': 120000, 'src': src, 'summary': summary, 'thumb': thumb, 'title': title}

    return details


####################################################################################################
def log(str):
    if DEBUG:
        Log.Debug(str)